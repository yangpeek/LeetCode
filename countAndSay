// Assume the n is the level need to print out
// The running speed is: O(2^n), 
// the innder loop size at normal case will be 2^n size, 
// the outter loop size will be contribute the size for each level
// as: ( 1 + 2 + 4 + 8 + 16 + ... + 2^n ), which led to: O(2^(n+1)) => O(2^n)
// space will be O(2^n) as well.
// Mathmatical provement for this array will lead the 2 -> [1.3, 1.4],
// since the layer grow is not always 2* 2^(n-1), that's the worst case.
public class Solution {
    public static void main(String []args) {
        countAndSay(6);
    }
    public static void countAndSay(int n) {
        String currentline = "1";
        for (int cur_row = 0; cur_row < n; cur_row++) {
            String newline = "";
            char cur_value = 0;
            int count = 0;
            for (int cur_pos = 0; cur_pos < currentline.length(); cur_pos++) {
                if (currentline.charAt(cur_pos) != cur_value) {
                    if (count != 0) {
                        newline = newline + Integer.toString(count) + cur_value;
                    }
                    cur_value = currentline.charAt(cur_pos);
                    count = 1;
                } else {
                    count ++;
                }
            }
            newline = newline + Integer.toString(count) + cur_value;
            System.out.println(currentline);
            currentline = newline;
        }
    }
};
