import java.util.HashMap;

/********** Algorithm Analyzing:**********
1. Space trade off for timing:
   Hashmap for storing value and index, 
   Retreive remaining from the hashmap.
   O(n) for both run time and space.
   
2. Brutal matching, for two round of loop:
   O(n^2) for run time, scale space.
   
3. Sorting first, and then left & right index:
   O(nlogn) for sorting run time, 
   O(n) for merge sort space.
   O(n) for pairing run time,
   scale for pairing space.
*****************************************/

public class Sumtwo{

     public static void main(String []args){
        int[] Array = { 1, 2, 3, 4, 5, 6 };
        sumtwo_test(Array, 5, 2, 1);
     }
     
     // to do: JUnit test
     private static void sumtwo_test(int[] array, int target, int expected_high_index, int expected_low_index) {
         int[] indexes = sumtwo(array, target);
         
         if (indexes[0] != expected_high_index || indexes[1] != expected_low_index) {
             System.out.println("Encountered Eror.");
         }
         else {
                 System.out.println("Test Good.");
         }
     }
     
     // Hash Map detect the remaining.
     // O(n) runing time.
     // O(n) space.
     // n is defined as the length of the array.
     // Small index ended first.
     // Explicitely avoid throw exception.
     private static int[] sumtwo(int[] array, int target) {
         HashMap<Integer, Integer> map = new HashMap<>();
         for (int i = 0; i < array.length; i++ ) {
             int value = array[i];
             int remaining = target - value;
             if (map.containsKey(remaining)) {
                 return new int[]{ i, map.get(remaining) };
             }
             map.put(value,i);
         }
         return new int[]{0,0};
     }
     
     // O(n) for pairing run time,
     // scale for pairing space.
     // highest indexed pair return first.
     // test case: sumtwo_test(Array, 5, 3, 0);
     private static int[] sumtwo_sorted(int[] array, int target) {
         int low_index = 0;
         int high_index = array.length - 1;
         if (low_index != high_index) {
             while (low_index < high_index) {
                 int sum = array[low_index] + array[high_index];
                 if (sum == target) {
                     return new int[]{high_index, low_index};
                 }
                 else if ( sum > target ) {
                     high_index -= 1;
                 } 
                 else {
                     low_index += 1;
                 }
             }
         }
         return new int[]{0,0};
     }
}
